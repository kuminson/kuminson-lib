{"version":3,"sources":["webpack://utils/webpack/universalModuleDefinition","webpack://utils/webpack/bootstrap","webpack://utils/./assets/methods.js","webpack://utils/./assets/constant.js","webpack://utils/./lib/class.js","webpack://utils/./lib/func.js","webpack://utils/./lib/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getKeyByAttr","attr","replace","all","letter","toUpperCase","INPUTTEXTTYPE","INPUTVALIDATENAMEKEY","INPUTVALIDATEVALUEKEY","formSelector","config","itemEls","document","querySelector","querySelectorAll","textType","elementType","this","inputEls","item","indexOf","nodeName","type","dataset","inputFilterFunc","e","val","target","addEventListener","removeEventListener","filter","re","RegExp","newVal","match","res","noZeroBefore","max","Number","String","min","FireCounter","num","fun","id","newNum","nowNum","fireFun","undefined","totalNum","toString","reset","NoScrollPuncture","selector","dom","posY","maxScroll","_addEvent","events","touches","pageY","scrollHeight","clientHeight","preventDefault","scrollTop","distanceY","cancelable","startEvent","_touchStart","endEvent","_touchMove","InputFilter","AutoFillForm","para","itemType","checkType","_testValTextFunc","required","text","Math","ceil","length","space","_testValSelectFunc","testConfig","validator","_getInputEls","validate","push","_fillTest","isTest","testState","test","testItem","Promise","resolve","focus","itemVal","_setValText","_setValSelect","setTimeout","formObj","getInputValue","trim","then","console","log","valEqualState","_isSameVal","catch","errors","child","field","safe","els","evt","InputEvent","inputType","data","dataTransfer","isComposing","dispatchEvent","checked","testVal","inputVal","JSON","stringify","parse","sort","ua","navigator","userAgent","vendor","opener","len","radix","chars","split","uuid","random","join","targetEl","testEl","createElement","style","whiteSpace","opacity","frontInfo","slice","floor","endInfo","innerText","appendChild","scrollWidth","offsetWidth","removeChild","params","seg","decodeURI","location","search","obj","url","encodeURI","numAddThousandSeparator","diffTime","timeText","timeArray","dhm","start","findIndex","end","reverse","timeName","addTrimFunc","onpageshow","persisted","performance","navigation","reload","array","from","to","rest","apply","str","charset","charCode","total","toLowerCase","charCodeAt","transform","func"],"mappings":"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","file":"utils.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"utils\"] = factory();\n\telse\n\t\troot[\"utils\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// 通过属性名获取元素data属性的key\nexport function getKeyByAttr (attr) {\n  const noData = attr.replace(/^data-/, '')\n  const hump = noData.replace(/-(\\w)/g, (all, letter) => {\n    return letter.toUpperCase()\n  })\n  return hump\n}","import {getKeyByAttr} from './methods'\n\n// 文本输入框类型\nexport const INPUTTEXTTYPE = ['text', 'password', 'number', 'email', 'url', 'textarea']\n\n// 文本输入框 自定义属性 效验key\nexport const INPUTVALIDATENAME = 'data-validate'\nexport const INPUTVALIDATENAMEKEY = getKeyByAttr(INPUTVALIDATENAME)\n\n// 文本输入框 自定义属性 效验值\nexport const INPUTVALIDATEVALUE = 'data-validate-value'\nexport const INPUTVALIDATEVALUEKEY = getKeyByAttr(INPUTVALIDATEVALUE)","import {\n  INPUTTEXTTYPE,\n  INPUTVALIDATENAME,\n  INPUTVALIDATENAMEKEY\n} from '../assets/constant'\n\n/**\n * 触发器\n * @param {number} num - 触发次数\n * @param {function} fun - 触发后执行的方法\n * @param {(string|number)} [id] - 如果实例时传入id，触发时必须传入相同id才能触发\n */\nclass FireCounter {\n  constructor (num, fun, id) {\n    this.newNum(num)\n    // 当前次数\n    this.nowNum = 0\n    // 需要触发的事件\n    this.fireFun = fun\n    // 触发识别码\n    if (id !== undefined) {\n      this.id = id\n    } else {\n      this.id = null\n    }\n  }\n\n  fire (id) {\n    // 如果构造时没有传入id 或者有传入id且与触发的id相同 可以完成一次触发\n    if ((this.id !== null && this.id === id) || (this.id === null)) {\n      this.nowNum += 1\n      if (this.nowNum >= this.totalNum) {\n        this.fireFun()\n      }\n    }\n  }\n\n  reset () {\n    this.nowNum = 0\n  }\n\n  newNum (num) {\n    // 需要关闭总次数\n    if(num.toString() >= 0) {\n      this.totalNum = num.toString()\n    } else {\n      this.totalNum = 0\n    }\n    this.reset()\n  }\n}\n\n/**\n * 禁止滚动穿刺\n * @param {stirng} selector - 目标标签css选择器\n */\nclass NoScrollPuncture {\n  constructor (selector) {\n    this.dom = document.querySelector(selector)\n    this.posY = 0\n    this.maxScroll = 0\n    // 帮定事件\n    this._addEvent()\n  }\n\n  _touchStart (e) {\n    const events = e.touches[0] || e\n    // 缓存开始时y位置\n    this.posY = events.pageY\n    // 计算最大滚动距离\n    this.maxScroll = this.dom.scrollHeight - this.dom.clientHeight\n  }\n\n  _touchMove (e) {\n    // 如果没有滚动距离，禁止滚动\n    if (this.maxScroll <= 0) {\n      // 禁止滚动\n      e.preventDefault()\n    }\n    // 获取当前滚动距离\n    const scrollTop = this.dom.scrollTop\n    // 计算滚动差\n    const events = e.touches[0] || e\n    const distanceY = events.pageY - this.posY\n    // 上边缘检测\n    if (distanceY > 0 && scrollTop === 0 && e.cancelable) {\n      // 往上滑，并且到头\n      // 禁止滚动的默认行为\n      e.preventDefault()\n      return\n    }\n    // 下边缘检测\n    if (distanceY < 0 && (scrollTop + 1 >= this.maxScroll) && e.cancelable) {\n      // 往下滑，并且到头\n      // 禁止滚动的默认行为\n      e.preventDefault()\n    }\n  }\n\n  _addEvent () {\n    this.startEvent = e => {this._touchStart(e)}\n    this.endEvent = e => {this._touchMove(e)}\n    this.dom.addEventListener('touchstart', this.startEvent)\n    this.dom.addEventListener('touchmove', this.endEvent)\n  }\n\n  removeEvent () {\n    this.dom.removeEventListener('touchstart', this.startEvent)\n    this.dom.removeEventListener('touchmove', this.endEvent)\n  }\n}\n\n/**\n * 输入框过滤器\n */\nclass InputFilter {\n  constructor (formSelector, config) {\n    const formEl = document.querySelector(formSelector)\n\n    const itemEls = formEl.querySelectorAll(`[${INPUTVALIDATENAME}]`)\n\n    const textType = INPUTTEXTTYPE\n\n    const elementType = ['INPUT', 'TEXTAREA']\n\n    this.config = config\n\n    // 获取输入框元素\n    this.inputEls = {}\n\n    for (let item of itemEls) {\n      if (elementType.indexOf(item.nodeName) === -1) {\n        continue\n      }\n      if (!item.type || textType.indexOf(item.type) === -1) {\n        continue\n      }\n      this.inputEls[item.dataset[INPUTVALIDATENAMEKEY]] = item\n    }\n\n    // 生成过滤事件\n    this.inputFilterFunc = {}\n\n    for (let key in this.config) {\n      this.inputFilterFunc[key] = (e) => {\n        let val = e.target.value\n        for (let item of this.config[key]) {\n          val = item(val)\n        }\n        e.target.value = val\n      }\n    }\n  }\n\n  add () {\n    for (let key in this.config) {\n      this.inputEls[key].addEventListener('input', this.inputFilterFunc[key], false)\n    }\n  }\n\n  remove () {\n    for (let key in this.config) {\n      this.inputEls[key].removeEventListener('input', this.inputFilterFunc[key], false)\n    }\n  }\n}\n\n/**\n * 输入框内容过滤方法生成集合\n */\nInputFilter.filter = {\n  /**\n   * 生成只有数字过滤器方法\n   * @param {number} n - 保留几位小数 -1为无限个小数 0为没有小数\n   * @return {function(*)} - 返回过滤器\n   */\n  onlyNumber (n) {\n    let re\n    if (n === 0) {\n      re = new RegExp(/^\\d+/)\n    } else if (n === -1) {\n      re = new RegExp('^\\\\d+\\\\.?(?:\\\\d)*')\n    } else {\n      re = new RegExp('^\\\\d+\\\\.?(?:\\\\d{0,' + n + '})?')\n    }\n    return (val) => {\n      const newVal = val.match(re)\n      let res = ''\n      if (newVal !== null) {\n        res = newVal[0]\n      }\n      return res\n    }\n  },\n  /**\n   * 生成 数字前没有0 的过滤器方法\n   * @return {function(*)}\n   */\n  noZeroBefore () {\n    return (val) => {\n      return val.replace(/^0+([1-9][0-9]*(?:\\.|\\.[0-9]+)?)$/, '$1')\n    }\n  },\n  /**\n   * 生成 数字必须小于n 的过滤器方法\n   * @param {number} n - 数字最大值\n   * @return {function(*=)}\n   */\n  max (n) {\n    return (val) => {\n      let res = val\n      if (Number(val) > n) {\n        res = String(n)\n      }\n      return res\n    }\n  },\n  /**\n   * 生成 数字必须大于n 的过滤器方法\n   * @param {number} n - 数字最小值\n   * @return {function(*=)}\n   */\n  min (n) {\n    return (val) => {\n      let res = val\n      if (Number(val) < n) {\n        res = String(n)\n      }\n      return res\n    }\n  }\n}\n\n\n/**\n * 自动测试表单\n * 依赖getInputValue方法\n * @param {{}} para - 初始化参数\n * {[]} para.testConfig - 测试配置\n * {{}} para.validator - 测试库async-validator的实例\n * {string} para.formSelector - 表单选择器\n * @method test() - 进行边缘测试\n * @method fill() - 填充安全值\n */\n\n/**\n * para.testConfig 参考\n * [\n * // 输入框\n * {\n *   key: 'name', // data-validate的值\n *   safe: 'asdfa', // 安全值\n *   test: [  // 要进行的边缘测试\n *     {type: 'required'},\n *     {type: 'max', max: 32, text: 'a'},\n *     {type: 'space', space: 'all', text: 'adbc'},\n *     {type: 'text', text: 'asd ads'},\n *     {type: 'text', text: '1231'}\n *   ]\n * },\n * // 选择框\n * {\n *   key: 'equipment',\n *   safe: ['mac', 'pc'],\n *   test: [\n *     {type: 'required'}\n *   ]\n * }\n * ]\n */\nclass AutoFillForm {\n\n  constructor (para) {\n    // 表单类型\n    this.itemType = {\n      textType: ['text', 'password', 'number', 'email', 'url', 'textarea'],\n      checkType: ['checkbox', 'radio'],\n    }\n\n    // 输入框通用测试方法\n    this._testValTextFunc = {\n      // 必填\n      required () {\n        return ''\n      },\n      // 文本\n      text (config) {\n        return config.text\n      },\n      // 最大值\n      max (config) {\n        const num = Math.ceil(config.max / config.text.length) + 1\n        let text = ''\n        for (let i = 0; i < num; i++) {\n          text += config.text\n        }\n        return text\n      },\n      // 空格\n      space (config) {\n        let text = config.text\n\n        switch (config.space) {\n          case 'before':\n            text = ' ' + text\n            break\n          case 'after':\n            text = text + ' '\n            break\n          case 'all':\n            text = ' ' + text + ' '\n        }\n\n        return text\n      }\n    }\n\n    // 选择框通用测试方法\n    this._testValSelectFunc = {\n      required () {\n        return []\n      }\n    }\n\n    // 测试用配置\n    this.testConfig = para.testConfig\n\n    // 效验实例\n    this.validator = para.validator\n\n    this.inputEls = this._getInputEls(para.formSelector)\n  }\n\n  // 获取表单元素\n  _getInputEls (formSelector) {\n    // 表单元素\n    const formEl = document.querySelector(formSelector)\n    const itemEls = formEl.querySelectorAll('[data-validate]')\n\n    // 获取所有input元素\n    const inputEls = {}\n\n    for (let item of itemEls) {\n      // 如果是输入框\n      if (item.type && this.itemType.textType.indexOf(item.type) !== -1) {\n        inputEls[item.dataset.validate] = item\n      }\n      // 如果是选择\n      if (item.type && this.itemType.checkType.indexOf(item.type) !== -1) {\n        if (inputEls[item.dataset.validate] === undefined) {\n          inputEls[item.dataset.validate] = []\n        }\n        inputEls[item.dataset.validate].push(item)\n        continue\n      }\n      // 如果是特殊类型\n      // if (item.dataset.validateValue !== undefined) {\n      //   inputEls[item.dataset.validate] = item\n      // }\n    }\n\n    return inputEls\n  }\n\n  test () {\n    return this._fillTest(true)\n  }\n\n  fill () {\n    return this._fillTest(false)\n  }\n\n  async _fillTest (isTest) {\n    // 对input元素进行边缘测试\n    let testState = true\n\n    for (let item of this.testConfig) {\n      // 判断key对应的元素是否存在\n      if (this.inputEls[item.key] === undefined) {\n        continue\n      }\n\n      // 调用测试方法\n      if (item.test !== undefined && isTest) {\n\n\n        for (let testItem of item.test) {\n          const testRes = await new Promise((resolve) => {\n            // 获取焦点\n            if (this.inputEls[item.key].length === undefined) {\n              this.inputEls[item.key].focus()\n            } else {\n              this.inputEls[item.key][0].focus()\n            }\n\n            // 注入文本\n            let itemVal = null\n            // 如果是输入框\n            if (this.inputEls[item.key].length === undefined) {\n              itemVal = this._testValTextFunc[testItem.type](testItem)\n              this._setValText(this.inputEls[item.key], itemVal)\n            } else { // 如果是选择框\n              itemVal = this._testValSelectFunc[testItem.type](testItem)\n              this._setValSelect(this.inputEls[item.key], itemVal)\n            }\n\n            // 效验结果\n            setTimeout(() => {\n              const formObj = getInputValue('.form', (val, name, type) => {\n                if (type === 'input' && typeof val === 'string') {\n                  return val.trim()\n                }\n                return val\n              })\n              this.validator.validate(formObj).then(() => {\n                console.log('效检');\n                // 判断当前值与输入值 是否相等\n                const valEqualState = this._isSameVal(this.inputEls[item.key], itemVal, formObj[item.key])\n                // 如果当前值与输入值不同 则判为未通过\n                if (!valEqualState) {\n                  resolve(true)\n                } else {\n                  resolve(false)\n                }\n              }).catch(({ errors }) => {\n                console.log('效检', errors);\n                // 如果报错里含有目标元素 则边缘检测成功\n                for (let child of errors) {\n                  if (child.field === item.key) {\n                    resolve(true)\n                  }\n                }\n                // 如果报错里没有目标元素 判断值是否有变\n                const valEqualState = this._isSameVal(this.inputEls[item.key], itemVal, formObj[item.key])\n                if (!valEqualState) {\n                  resolve(true)\n                }\n                resolve(false)\n              })\n            }, 20)\n          })\n\n          if (!testRes) {\n            console.log('边缘测试未通过', testItem)\n            testState = false\n            break\n          }\n\n        }\n\n      }\n\n      // 注入安全内容\n      if (this.inputEls[item.key].length === undefined) {\n        this._setValText(this.inputEls[item.key], item.safe)\n      } else { // 如果是选择框\n        this._setValSelect(this.inputEls[item.key], item.safe)\n      }\n\n\n\n    }\n\n    if (testState) {\n      console.log('边缘测试 通过')\n      return true\n    }\n    return false\n  }\n\n  // 设置输入框内容\n  _setValText(els, val) {\n    const evt = new InputEvent('input', {\n      inputType: 'insertText',\n      data: val,\n      dataTransfer: null,\n      isComposing: false\n    });\n    els.value = val\n    els.dispatchEvent(evt)\n  }\n\n  // 设置选择框内容\n  _setValSelect(els, val) {\n    for (let item of els) {\n      if (val.indexOf(item.value) !== -1) {\n        item.checked = true\n      }\n    }\n  }\n\n  // 判断输入值是否不一样\n  _isSameVal (inputEls, testVal, inputVal) {\n    // 判断当前值与输入值 是否相等\n    let valEqualState = null\n    if (inputEls.length === undefined) {\n      valEqualState = testVal === inputVal\n    } else { // 如果是选择框\n      valEqualState = JSON.stringify(JSON.parse(JSON.stringify(testVal)).sort()) === JSON.stringify(JSON.parse(JSON.stringify(inputVal)).sort())\n    }\n    return valEqualState\n  }\n}\n\n\nexport default {\n  FireCounter,\n  NoScrollPuncture,\n  InputFilter,\n  AutoFillForm\n}","import {\n  INPUTTEXTTYPE,\n  INPUTVALIDATENAME,\n  INPUTVALIDATENAMEKEY,\n  INPUTVALIDATEVALUEKEY,\n} from '../assets/constant'\n\nexport default {\n  /**\n   * 获取当前设备类型\n   * @return {string} - 设备类型\n   */\n  getOs () {\n    let ua = navigator.userAgent || navigator.vendor || window.opener\n    if (/ipad|iphone|ipod/i.test(ua)) {\n      return 'ios'\n    }\n    if (/android/i.test(ua)) {\n      return 'android'\n    }\n    return 'desktop'\n  },\n  /**\n   * 生成唯一id\n   * @param {number} [len] - 要生成id的字符长度\n   * @param {number} [radix] - 要生成id的进制数\n   * @return {string} - uuid\n   */\n  getUuid (len, radix) {\n    let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    let uuid = []\n    let i;\n    radix = radix || chars.length;\n\n    if (len) {\n      // Compact form\n      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n    } else {\n      // rfc4122, version 4 form\n      let r;\n\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4';\n\n      // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n      for (i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n    return uuid.join('');\n  },\n  /**\n   * 根据容器宽度对给定文本进行中间省略\n   * @param {string} id - 目标dom的id\n   * @param {(string|number)} text - 要处理的文本\n   * @return {string} 处理后中间增加省略号的文本\n   * TODO 增加算法 不要一个一个字符试 比如二分法\n   * TODO 增加安全性 循环增加终止防护报错 比如加个计数器 循环超过5000次 终止并抛出错误\n   */\n  midtextEllipsis (id, text) {\n    const targetEl = window.document.querySelector('#' + id)\n    const testEl = document.createElement('div')\n    testEl.style.whiteSpace = 'nowrap'\n    testEl.style.opacity = 0\n\n    let frontInfo = text.slice(0, Math.floor(text.length / 2))\n    let endInfo = text.slice(Math.floor(text.length / 2))\n    testEl.innerText = frontInfo + endInfo\n    targetEl.appendChild(testEl)\n\n    if (testEl.scrollWidth < targetEl.offsetWidth) {\n      return text\n    }\n\n    testEl.innerText = frontInfo + '...' + endInfo\n    while (testEl.scrollWidth - targetEl.offsetWidth > 2) {\n      if (frontInfo.length > endInfo.length) {\n        frontInfo = frontInfo.slice(0, -1)\n      } else {\n        endInfo = endInfo.slice(1)\n      }\n      testEl.innerText = frontInfo + '...' + endInfo\n    }\n    targetEl.removeChild(testEl)\n    return frontInfo + '...' + endInfo\n  },\n  /**\n   * 解析url里的参数\n   * 只适用前端通信url 与后端通信url要用decodeURIComponent方法\n   * @return {object} 反回key-value格式的对象\n   */\n  parseUrlParams () {\n    const a = decodeURI(location.search)\n    let params = {}\n    let seg = a.replace(/^\\?/, '').split('&')\n    let len = seg.length\n    let p;\n    for (let i = 0; i < len; i++) {\n      if (seg[i]) {\n        p = seg[i].split('=');\n        params[p[0]] = p[1];\n      }\n    }\n    return params;\n  },\n  /**\n   * 编码给前端用的url参数\n   * 如果要发给后端要用encodeURIComponent方法\n   * @param {object} obj - 要编码的数据\n   * @return {string} - 编码后的数据\n   */\n  encodeUrlParam (obj) {\n    let url = ''\n    for (let key in obj) {\n      if (obj[key] !== '' && obj[key] !== undefined) {\n        url += '&' + key + '=' + obj[key]\n      }\n    }\n    if (url === '') {\n      return ''\n    }\n    url = url.replace(/^&/, '?')\n    return encodeURI(url)\n  },\n  /**\n   * 给数字增加千位分隔符\n   * @param {(string|number)} val - 需要增加千位符的数字\n   * @return {string} - 已加上千位符的数字\n   */\n  numAddThousandSeparator (val) {\n    const num = String(val)\n    return num.replace(/\\d+/, function(s){\n      return s.replace(/(\\d)(?=(\\d{3})+$)/g, '$1,')\n    })\n  },\n  /**\n   * 解析毫秒数为具体时间\n   * @param {number} t - 需要解析的毫秒数\n   * @return {string} - 解析后的时间\n   * TODO 下个版本可以增加国际化 时间('day','h','m','s')做为参数传入\n   */\n  parseLastTime (t) {\n    let diffTime = Number(t)\n    let timeText = ''\n    const timeArray = []\n\n    if (diffTime < 1000) {\n      return ''\n    }\n\n    const dhm = [\n      {key: 'd', num: 60 * 60 * 24 * 1000},\n      {key: 'h', num: 60 * 60 * 1000},\n      {key: 'm', num: 60 * 1000}\n    ]\n    for (let i = 0; i < dhm.length; i++) {\n      if (diffTime / dhm[i].num >= 1) {\n        timeArray.push(Math.floor(diffTime / dhm[i].num))\n        diffTime = diffTime - (Math.floor(diffTime / dhm[i].num) * (dhm[i].num))\n      } else {\n        timeArray.push(0)\n      }\n    }\n    timeArray.push(Math.floor(Number(diffTime * 0.001) % (60)))\n\n    const start = timeArray.findIndex((item) => {\n      return item > 0\n    })\n    let end = JSON.parse(JSON.stringify(timeArray)).reverse().findIndex((item) => {\n      return item > 0\n    })\n    end = (timeArray.length - 1) - end\n\n    const timeName = ['day', 'h', 'm', 's']\n    for (let i = start; i <= end; i++) {\n      if (i === 0) {\n        if (timeArray[i] > 1) {\n          timeText = timeText + ' ' + timeArray[i] + 'days'\n          continue\n        }\n      }\n      timeText = timeText + ' ' + timeArray[i] + timeName[i]\n    }\n    this.addTrimFunc()\n    return timeText.trim()\n  },\n  /**\n   * 增加去除前后空格方法\n   */\n  addTrimFunc () {\n    if (!String.prototype.trim) {\n      String.prototype.trim = function () {\n        return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n      };\n    }\n  },\n  /**\n   * 修复safari下，页面反回后 只用缓存页面而不刷新页面\n   */\n  safariReload () {\n    let browserRule = /^.*((iPhone)|(iPad)|(Safari))+.*$/;\n    if (browserRule.test(navigator.userAgent)) {\n      window.onpageshow = function (e) {\n        if (e.persisted || (window.performance && window.performance.navigation.type === 2)) {\n          window.location.reload();\n        }\n      }\n    }\n  },\n  /**\n   * 数组可以像字符串一样移除元素\n   * 该方法会改变原数组\n   * 移除是包括from和to元素的\n   * @param {array} array - 目标数组\n   * @param {number} from - 要移除位置/开始移除位置\n   * @param {number} [to] - 结束位置\n   * @return {array} - 改变后的数组\n   */\n  extensionArrayRemove (array, from, to) {\n    let rest = array.slice((to || from) + 1 || array.length);\n    array.length = from < 0 ? array.length + from : from;\n    array.push.apply(array, rest);\n    return array\n  },\n  /**\n   * 计算字符串字节长度\n   * 一个utf8数字占1个字节，一个utf8英文字母占1个字节，\n   * 少数是汉字每个占用3个字节(基本上等同于GBK，含21000多个汉字)，\n   * 多数占用4个字节(多数的意思是中日韩超大字符集里面的汉字，有5万多个)\n   * @param {string} str - 要计算的字符串\n   * @param {string} [charset=utf-8] - 字符串编码类型，默认utf-8\n   * @return {number} - 反回字符串字节数\n   */\n  getStringBytes (str, charset) {\n    let total = 0\n    let charCode\n    let i\n    let len\n    charset = charset ? charset.toLowerCase() : '';\n    if (charset === 'utf-16' || charset === 'utf16') {\n      for (i = 0, len = str.length; i < len; i++) {\n        charCode = str.charCodeAt(i);\n        if (charCode <= 0xffff) {\n          total += 2;\n        } else {\n          total += 4;\n        }\n      }\n    } else {\n      for (i = 0, len = str.length; i < len; i++) {\n        charCode = str.charCodeAt(i);\n        if (charCode <= 0x007f) {\n          total += 1;\n        } else if (charCode <= 0x07ff) {\n          total += 2;\n        } else if (charCode <= 0xffff) {\n          total += 3;\n        } else {\n          total += 4;\n        }\n      }\n    }\n    return total;\n  },\n  /**\n   * 获取原生应用语言类型\n   * @return {(string|null)} - 国际化语言类型\n   */\n  getUserAgentLanguage () {\n    let r = window.navigator.userAgent.match(/language=(.+?)(?:\\/|$)/);\n    if (r != null) return decodeURI(r[1]);\n    return null;\n  },\n\n  /**\n   * 获取表单内容值\n   * @param {string} formSelector - form表单标签的css选择器\n   * @param {function} [transform] - 对获取的值进行转换\n   * transform  param {string} val - 获取的值\n   *            param {string} name - 值对应的名字\n   *            param {string} type - 值的类型 'input'，'select'，'other'三个中的一个\n   *            return {any} val - 返回转换后的值\n   * @return {{}} 表单的值对象\n   */\n  getInputValue (formSelector, transform) {\n    const formEl = document.querySelector(formSelector)\n\n    const itemEls = formEl.querySelectorAll(`[${INPUTVALIDATENAME}]`)\n\n    // 获取表单对象\n    const formObj = {}\n\n    const textType = INPUTTEXTTYPE\n    const checkType = ['checkbox', 'radio']\n\n    for (let item of itemEls) {\n      // 如果是输入框\n      if (item.type && textType.indexOf(item.type) !== -1) {\n        let val = item.value\n        if (typeof transform === 'function') {\n          const res = transform(val, item.dataset[INPUTVALIDATENAMEKEY], 'input')\n          val = res === undefined ? val : res\n        }\n        formObj[item.dataset[INPUTVALIDATENAMEKEY]] = val\n        continue\n      }\n      // 如果是选择\n      if (item.type && checkType.indexOf(item.type) !== -1) {\n        let val = item.value\n        if (typeof transform === 'function') {\n          const res = transform(val, item.dataset[INPUTVALIDATENAMEKEY], 'select')\n          val = res === undefined ? val : res\n        }\n        if (formObj[item.dataset[INPUTVALIDATENAMEKEY]] === undefined) {\n          formObj[item.dataset[INPUTVALIDATENAMEKEY]] = []\n        }\n        if (item.checked) {\n          formObj[item.dataset[INPUTVALIDATENAMEKEY]].push(val)\n        }\n        continue\n      }\n      // 如果是特殊类型\n      if (item.dataset[INPUTVALIDATEVALUEKEY] !== undefined) {\n        let val = item.dataset[INPUTVALIDATEVALUEKEY]\n        if (typeof transform === 'function') {\n          const res = transform(val, item.dataset[INPUTVALIDATENAMEKEY], 'other')\n          val = res === undefined ? val : res\n        }\n        formObj[item.dataset[INPUTVALIDATENAMEKEY]] = val\n      }\n\n    }\n\n    return formObj\n  }\n\n\n\n}\n\n\n","'use strict';\n\nimport classMethod from './class'\nimport funcMethod from './func'\n\nexport default {\n  ...classMethod,\n  ...funcMethod\n}"],"sourceRoot":""}